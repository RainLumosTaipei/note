import{_ as o,c as n,o as t,ag as i}from"./chunks/framework.BmLMQRXF.js";const h=JSON.parse('{"title":"类型声明","description":"","frontmatter":{},"headers":[],"relativePath":"lang/c/declare.md","filePath":"lang/c/declare.md"}'),a={name:"lang/c/declare.md"};function c(s,e,l,r,p,d){return t(),n("div",null,e[0]||(e[0]=[i(`<h1 id="类型声明" tabindex="-1">类型声明 <a class="header-anchor" href="#类型声明" aria-label="Permalink to &quot;类型声明&quot;">​</a></h1><p>顺时针螺旋式读法</p><blockquote><p>参考网页 <a href="https://c-faq.com/decl/spiral.anderson.html" target="_blank" rel="noreferrer">https://c-faq.com/decl/spiral.anderson.html</a></p></blockquote><p>There are three simple steps to follow:</p><ol><li><p>Starting with the unknown element, move in a spiral/clockwise direction; when ecountering the following elements replace them with the corresponding english statements:</p><p>[X] or [] 数组</p><p>=&gt; Array X size of... or Array undefined size of...</p><p>(type1, type2) 函数</p><p>=&gt; function passing type1 and type2 returning...</p><p>* 指针</p><p>=&gt; pointer(s) to...</p></li><li><p>Keep doing this in a spiral/clockwise direction until all tokens have been covered.</p></li><li><p>Always resolve anything in parenthesis first!</p></li></ol><h2 id="指针数组" tabindex="-1">指针数组 <a class="header-anchor" href="#指针数组" aria-label="Permalink to &quot;指针数组&quot;">​</a></h2><pre><code>                 +-------+
                 | +-+   |
                 | ^ |   |
            char *str[10];
             ^   ^   |   |
             |   +---+   |
             +-----------+
</code></pre><p>Question we ask ourselves: What is str?</p><blockquote><p><code>str is an...</code></p></blockquote><ul><li>We move in a spiral clockwise direction starting with <code>str</code> and the first character we see is a <code>[</code> so, that means we have an array, so...</li></ul><blockquote><p><code>str is an array 10 of...</code></p></blockquote><ul><li>Continue in a spiral clockwise direction, and the next thing we encounter is the <code>*</code> so, that means we have pointers, so...</li></ul><blockquote><p><code>str is an array 10 of pointers to...</code></p></blockquote><ul><li>Continue in a spiral direction and we see the end of the line (the <code>;</code>), so keep going and we get to the type <code>char</code>, so...</li></ul><blockquote><p><code>str is an array 10 of pointers to char</code></p></blockquote><ul><li>We have now visited every token; therefore we are done!</li></ul><hr><h2 id="函数指针" tabindex="-1">函数指针 <a class="header-anchor" href="#函数指针" aria-label="Permalink to &quot;函数指针&quot;">​</a></h2><pre><code>                 +--------------------+
                 | +---+              |
                 | |+-+|              |
                 | |^ ||              |
            char *(*fp)( int, float *);
             ^   ^ ^  ||              |
             |   | +--+|              |
             |   +-----+              |
             +------------------------+
</code></pre><p>Question we ask ourselves: What is fp?</p><blockquote><p><code>fp is a...</code></p></blockquote><ul><li>Moving in a spiral clockwise direction, the first thing we see is a <code>)</code>; therefore, fp is inside parenthesis, so we continue the spiral inside the parenthesis and the next character seen is the <code>*</code>, so...</li></ul><blockquote><p><code>fp is a pointer to...</code></p></blockquote><ul><li>We are now out of the parenthesis and continuing in a spiral clockwise direction, we see the <code>(</code>; therefore, we have a function, so...</li></ul><blockquote><p><code>fp is a pointer to a function passing an int and a pointer to float returning...</code></p></blockquote><ul><li>Continuing in a spiral fashion, we then see the <code>*</code> character, so...</li></ul><blockquote><p><code>fp is a pointer to a function passing an int and a pointer to float returning a pointer to...</code></p></blockquote><ul><li>Continuing in a spiral fashion we see the <code>;</code>, but we haven&#39;t visited all tokens, so we continue and finally get to the type <code>char</code>, so...</li></ul><blockquote><p><code>fp is a pointer to a function passing an int and a pointer to float returning a pointer to a char</code></p></blockquote><hr><h2 id="signal-函数" tabindex="-1">signal 函数 <a class="header-anchor" href="#signal-函数" aria-label="Permalink to &quot;signal 函数&quot;">​</a></h2><pre><code>                  +-----------------------------+
                  |                  +---+      |
                  |  +---+           |+-+|      |
                  |  ^   |           |^ ||      |
            void (*signal(int, void (*fp)(int)))(int);
             ^    ^      |      ^    ^  ||      |
             |    +------+      |    +--+|      |
             |                  +--------+      |
             +----------------------------------+
</code></pre><p>Question we ask ourselves: What is <code>signal</code>?</p><p>Notice that signal is <em>inside</em> parenthesis, so we must resolve this first!</p><ul><li>Moving in a <em>clockwise</em> direction we see <code>(</code> so we have...</li></ul><blockquote><p><code>signal is a function passing an int and a...</code></p></blockquote><ul><li>Hmmm, we can use this same rule on <code>fp</code>, so... What is fp? fp is also inside parenthesis so continuing we see an <code>*</code>, so...</li></ul><blockquote><p><code>fp is a pointer to...</code></p></blockquote><ul><li>Continue in a spiral clockwise direction and we get to <code>(</code>, so...</li></ul><blockquote><p><code>fp is a pointer to a function passing int returning...</code></p></blockquote><ul><li>Now we continue out of the function parenthesis and we see void, so...</li></ul><blockquote><p><code>fp is a pointer to a function passing int returning nothing (void)</code></p></blockquote><ul><li>We have finished with fp so let&#39;s catch up with <code>signal</code>, we now have...</li></ul><blockquote><p><code>signal is a function passing an int and a pointer to a function passing an int returning nothing (void) returning...</code></p></blockquote><ul><li>We are still inside parenthesis so the next character seen is a <code>*</code>, so...</li></ul><blockquote><p><code>signal is a function passing an int and a pointer to a function passing an int returning nothing (void) returning a pointer to...</code></p></blockquote><ul><li>We have now resolved the items within parenthesis, so continuing clockwise, we then see another <code>(</code>, so...</li></ul><blockquote><p><code>signal is a function passing an int and a pointer to a function passing an int returning nothing (void) returning a pointer to a function passing an int returning...</code></p></blockquote><ul><li><em>Finally</em> we continue and the only thing left is the word <code>void</code>, so the final complete definition for signal is:</li></ul><blockquote><p><code>signal is a function passing an int and a pointer to a function passing an int returning nothing (void) returning a pointer to a function passing an int returning nothing (void)</code></p></blockquote><hr><h2 id="const-and-volatile" tabindex="-1">Const and Volatile <a class="header-anchor" href="#const-and-volatile" aria-label="Permalink to &quot;Const and Volatile&quot;">​</a></h2><p>The same rule is applied for const and volatile. For Example:</p><pre><code>const char *chptr;
</code></pre><ul><li>Now, what is chptr??</li></ul><blockquote><p><code>chptr is a pointer to a char constant</code> 指向一个字符常量的指针</p></blockquote><p>How about this one:</p><pre><code>char * const chptr;
</code></pre><ul><li>Now, what is chptr??</li></ul><blockquote><p><code>chptr is a constant pointer to char</code> 常量指针，指向一个字符</p></blockquote><p>Finally:</p><pre><code>volatile char * const chptr;
</code></pre><ul><li>Now, what is chptr??</li></ul><blockquote><p><code>chptr is a constant pointer to a char volatile.</code> 常量指针，指向一个<code>volatile</code>字符</p></blockquote><hr>`,65)]))}const g=o(a,[["render",c]]);export{h as __pageData,g as default};
