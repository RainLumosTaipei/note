import{_ as a,c as i,o as e,ag as l}from"./chunks/framework.BmLMQRXF.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"other/服务端开发.md","filePath":"other/服务端开发.md"}'),n={name:"other/服务端开发.md"};function t(h,s,p,d,k,r){return e(),i("div",null,s[0]||(s[0]=[l(`<h2 id="简介" tabindex="-1"><strong>简介</strong> <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;**简介**&quot;">​</a></h2><p>总结自《服务端开发：技术，方法与实用解决方案》，郭进著。</p><h2 id="流程" tabindex="-1"><strong>流程</strong> <a class="header-anchor" href="#流程" aria-label="Permalink to &quot;**流程**&quot;">​</a></h2><p>前端 --&gt; 负载均衡 --&gt; 集群 --&gt; 缓存 --&gt; 数据库</p><h2 id="负载均衡" tabindex="-1"><strong>负载均衡</strong> <a class="header-anchor" href="#负载均衡" aria-label="Permalink to &quot;**负载均衡**&quot;">​</a></h2><ul><li><strong>四层 TCP/UDP</strong></li></ul><p><code>LVS(Linux Virtual Server)</code></p><ul><li><strong>七层 HTTP</strong></li></ul><p><code>Nginx</code>,<code>Tengine</code></p><h2 id="缓存" tabindex="-1"><strong>缓存</strong> <a class="header-anchor" href="#缓存" aria-label="Permalink to &quot;**缓存**&quot;">​</a></h2><h3 id="本地缓存" tabindex="-1"><strong>本地缓存</strong> <a class="header-anchor" href="#本地缓存" aria-label="Permalink to &quot;**本地缓存**&quot;">​</a></h3><p><code>Bean Cache</code>,<code>Guava Cache</code>,<code>Caffine</code>,<code>Ehcache</code></p><h3 id="分布式缓存" tabindex="-1">分布式缓存 <a class="header-anchor" href="#分布式缓存" aria-label="Permalink to &quot;分布式缓存&quot;">​</a></h3><p><code>Redis</code>,<code>Memcached</code></p><h3 id="cdn" tabindex="-1">CDN <a class="header-anchor" href="#cdn" aria-label="Permalink to &quot;CDN&quot;">​</a></h3><h3 id="缓存预热" tabindex="-1">缓存预热 <a class="header-anchor" href="#缓存预热" aria-label="Permalink to &quot;缓存预热&quot;">​</a></h3><p>数据分片，数据加载，数据处理</p><h3 id="缓存雪崩" tabindex="-1">缓存雪崩 <a class="header-anchor" href="#缓存雪崩" aria-label="Permalink to &quot;缓存雪崩&quot;">​</a></h3><p>大量缓存集中失效，或热点失效。</p><p>缓存常驻，多级缓存，过期时间优化，加锁</p><h3 id="缓存穿透" tabindex="-1">缓存穿透 <a class="header-anchor" href="#缓存穿透" aria-label="Permalink to &quot;缓存穿透&quot;">​</a></h3><p>查询一条缓存和数据库中均不存在的数据。</p><p>布隆过滤器：<code>RedisBloom</code>, <code>Redis Bitmaps</code></p><h2 id="数据库" tabindex="-1">数据库 <a class="header-anchor" href="#数据库" aria-label="Permalink to &quot;数据库&quot;">​</a></h2><h3 id="架构优化" tabindex="-1">架构优化 <a class="header-anchor" href="#架构优化" aria-label="Permalink to &quot;架构优化&quot;">​</a></h3><ul><li>读写分离</li></ul><p>写入主数据库，读取从数据库。</p><ul><li>垂直分库</li></ul><p>将不同的业务数据分别存储在不同的数据库中。</p><ul><li>垂直分表</li></ul><p>冷热数据分离，如A表保留详细信息，B表只保留简要信息，由主键索引关联。</p><ul><li>水平分库</li></ul><p>按某种规则 (<code>Hash</code>取模) , 将一个表切分成多个表，并分散到多个库中。</p><ul><li>水平分表</li></ul><p>将同一张表分表，减少单表数据量。</p><ul><li>数据库中间件</li></ul><p><code>TDDL</code>,<code>Mycat</code>,<code>Sharding-JDBC</code></p><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><p>主要包括以下两种原则，会发生冲突，需要自行抉择。</p><ul><li>单一职责</li></ul><p>一个<code>api</code>所调用的函数仅做一件事情，避免复杂度，原子化</p><ul><li>命令而非询问原则</li></ul><p>一个<code>api</code>可以调用多个函数，并在函数之间传递数据，<code>service</code> 层处理数据，而不是在<code>api</code>中处理数据。</p><h2 id="日志" tabindex="-1">日志 <a class="header-anchor" href="#日志" aria-label="Permalink to &quot;日志&quot;">​</a></h2><p>不能包含敏感信息，且至少保留6个月以上。</p><p>以占位符格式，而非拼接字符串。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx, data = {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><ul><li>区分日志等级</li></ul><p><code>ERROR</code>、<code>WARN</code>、<code>INFO</code>、<code>DEBUG</code></p><ul><li>区分日志格式</li></ul><p>监控日志格式：时间、日志等级、业务类名、返回值</p><p>错误日志格式：时间、日志等级、错误类型、错误信息、traceid、请求参数、返回值</p><p>业务日志格式：时间、业务类名、多个业务参数、返回值</p><h2 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h2><ul><li>异常模式</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyException</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String code;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>错误码模式</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CommonResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String code;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String message;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Boolean success;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CommonResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,58)]))}const E=a(n,[["render",t]]);export{c as __pageData,E as default};
