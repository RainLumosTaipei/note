import{_ as i,c as a,o as t,ae as p}from"./chunks/framework.tuuL-SzM.js";const y=JSON.parse('{"title":"type_traits","description":"","frontmatter":{},"headers":[],"relativePath":"zh/lang/cxx/mm/type_traits.md","filePath":"zh/lang/cxx/mm/type_traits.md","lastUpdated":null}'),n={name:"zh/lang/cxx/mm/type_traits.md"};function e(l,s,h,k,r,d){return t(),a("div",null,s[0]||(s[0]=[p(`<h1 id="type-traits" tabindex="-1">type_traits <a class="header-anchor" href="#type-traits" aria-label="Permalink to &quot;type_traits&quot;">​</a></h1><p>用于标识一个数据类型是否使用默认的ctor, dtor等内存函数。这样可以优化这些操作。</p><p>难点：需要兼容int, char等内置类型，所以使用traits技巧。</p><p><code>cpp_type_traits</code><code>type_traits</code></p><h2 id="声明" tabindex="-1">声明 <a class="header-anchor" href="#声明" aria-label="Permalink to &quot;声明&quot;">​</a></h2><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __false_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{};</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // false type</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __true_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{};</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // true type</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __type_traits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typedef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __false_type has_trivial_default_constructor;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // ctor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typedef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __false_type has_trivial_copy_constructor;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // copy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typedef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __false_type has_trivial_assignment_operator;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // assign</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typedef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __false_type has_trivial_destructor;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // dtor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typedef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __false_type is_POD_type;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                       // plain old data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>对于内置类型，需要进行模版特化：</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __type_traits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typedef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __true_type has_trivial_default_constructor;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typedef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __true_type has_trivial_copy_constructor;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typedef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __true_type has_trivial_assignment_operator;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typedef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __true_type has_trivial_destructor;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typedef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __true_type is_POD_type;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div>`,8)]))}const c=i(n,[["render",e]]);export{y as __pageData,c as default};
