import{_ as t,c as i,o as a,ag as e}from"./chunks/framework.BmLMQRXF.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"compile/gas.md","filePath":"compile/gas.md"}'),n={name:"compile/gas.md"};function l(h,s,d,r,p,k){return a(),i("div",null,s[0]||(s[0]=[e(`<h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>gas 是 GNU 的汇编编译器,一般与 gld (链接器)一起使用. 现在改名为 as 和 ld</p><h2 id="寄存器" tabindex="-1">寄存器 <a class="header-anchor" href="#寄存器" aria-label="Permalink to &quot;寄存器&quot;">​</a></h2><ul><li>General Purpose Registers (64 bits)</li></ul><table tabindex="0"><thead><tr><th>寄存器</th><th>用途</th></tr></thead><tbody><tr><td>RAX (Accumulator Register)</td><td>Used for arithmetic operations and function returns.</td></tr><tr><td>RBX (Base Register)</td><td>Can be used to access data in memory.</td></tr><tr><td>RCX (Counter Register)</td><td>Used as a counter in loops and repetition operations.</td></tr><tr><td>RDX (Data Register)</td><td>Used in arithmetic and I/O operations.</td></tr><tr><td>RSI (Source Index)</td><td>Used as a source pointer in string operations.</td></tr><tr><td>RDI (Destination Index)</td><td>Used as destination pointer in string operations.</td></tr><tr><td>RBP (Base Pointer)</td><td>Used to point to the base of a stack frame.</td></tr><tr><td>RSP (Stack Pointer)</td><td>Points to the top of the stack.</td></tr><tr><td>R8-R15</td><td>Additional general purpose registers.</td></tr></tbody></table><ul><li>Segment Registers (16 bits)</li></ul><table tabindex="0"><thead><tr><th>寄存器</th><th>用途</th></tr></thead><tbody><tr><td>CS (Code Segment)</td><td>Code segment.</td></tr><tr><td>DS (Data Segment)</td><td>Data segment.</td></tr><tr><td>SS (Stack Segment)</td><td>Stack segment.</td></tr><tr><td>ES, FS, GS</td><td>Additional segments used in specific data operations.</td></tr></tbody></table><ul><li>Special Purpose Recorders</li></ul><table tabindex="0"><thead><tr><th>寄存器</th><th>用途</th></tr></thead><tbody><tr><td>RIP (Instruction Pointer)</td><td>Points to the next instruction to be executed.</td></tr><tr><td>RFLAGS (Flags Register)</td><td>Contains status and control flags, such as carry, zero, sign, overflow, etc.</td></tr></tbody></table><ul><li>General Purpose Registers (32 bits)</li></ul><table tabindex="0"><thead><tr><th>寄存器</th><th>用途</th></tr></thead><tbody><tr><td>EAX, EBX, ECX, EDX, ESI, EDI, EBP, ESP</td><td>32-bit versions of 64-bit registers.</td></tr><tr><td>R8D-R15D</td><td>32-bit versions of registers R8-R15.</td></tr></tbody></table><ul><li>General Purpose Registers (16 bits)</li></ul><table tabindex="0"><thead><tr><th>寄存器</th><th>用途</th></tr></thead><tbody><tr><td>AX, BX, CX, DX, SI, DI, BP, SP</td><td>16-bit versions of 64-bit registers.</td></tr><tr><td>R8W-R15W</td><td>16-bit versions of registers R8-R15.</td></tr></tbody></table><ul><li>General Purpose Registers (8 bits)</li></ul><table tabindex="0"><thead><tr><th>寄存器</th><th>用途</th></tr></thead><tbody><tr><td>AH, AL, BH, BL, CH, CL, DH, DL</td><td>Subdivisions of 16-bit registers (AX, BX, CX, DX).</td></tr><tr><td>R8B-R15B</td><td>8-bit versions of registers R8-R15.</td></tr><tr><td>SPL, BPL, SIL, DIL</td><td>8-bit versions of SP, BP, SI, DI registers.</td></tr></tbody></table><ul><li>Vector/SIMD Registers</li></ul><table tabindex="0"><thead><tr><th>寄存器</th><th>用途</th></tr></thead><tbody><tr><td>XMM0-XMM15</td><td>Used for 128-bit SIMD (Single Instruction, Multiple Data) operations.</td></tr><tr><td>YMM0-YMM15</td><td>256-bit versions of the XMM registers.</td></tr><tr><td>ZMM0-ZMM31</td><td>512-bit versions of the XMM registers, used in AVX-512.</td></tr></tbody></table><ul><li>Examples of Use:</li></ul><table tabindex="0"><thead><tr><th>寄存器</th><th>用途</th></tr></thead><tbody><tr><td>RAX</td><td>Save result of a multiplication operation.</td></tr><tr><td>RSI and RDI</td><td>Used in memory copy operations (movsb, movsw, movsd, movsq).</td></tr><tr><td>RCX</td><td>Used as a loop counter.</td></tr></tbody></table><h2 id="入门" tabindex="-1">入门 <a class="header-anchor" href="#入门" aria-label="Permalink to &quot;入门&quot;">​</a></h2><p>现在给出一个简易的输出 helloworld 的汇编程序:</p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">section .data</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     .ascii &quot;Hello, World!\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">section .text</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.globl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _start</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_start:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rax</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # syscall: sys_write</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rdi</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # file descriptor: stdout</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     mov</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $hello, %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rsi</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # string address</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rdx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # string length</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     syscall</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # calls the kernel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rax</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # syscall: sys_exit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     xor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rdi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rdi</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # exit status: 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     syscall</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # calls the kernel</span></span></code></pre></div><p>进行编译和链接:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ld</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.o</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./hello</span></span></code></pre></div><p>同样我们也可以使用 nasm 进行编译</p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">section .data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &#39;Hello, World!&#39;, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">section .text</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _start</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_start:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         ; syscall: write</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rdi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         ; file descriptor: stdout</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rsi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; pointer to message</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rdx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ; message length</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     syscall</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            ; make the syscall</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ; syscall: exit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     xor</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rdi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rdi</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       ; status: 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     syscall</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            ; make the syscall</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nasm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elf64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.asm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ld</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.o</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./hello</span></span></code></pre></div><blockquote><p>参考链接 <a href="https://terminalroot.com/x8664-assembly-tutorial-with-gnu-assembler-gas-for-beginners/" target="_blank" rel="noreferrer">https://terminalroot.com/x8664-assembly-tutorial-with-gnu-assembler-gas-for-beginners/</a></p></blockquote><blockquote><p>Note: In addition to the symbol %(from GAS) in front of the registers and the comments being #(GAS) and ;(NASM), GAS can also comment style C: /_ Comment for multiple lines _/, in addition to other forms depending on the architecture, examples:</p></blockquote><table tabindex="0"><thead><tr><th>符号</th><th>架构</th></tr></thead><tbody><tr><td>;</td><td>AMD 29k family, ARC, H8/300 family, HPPA, PDP-11, picoJava, Motorola and M32C</td></tr><tr><td>@</td><td>ARM 32-bit</td></tr><tr><td>//</td><td>AArch64</td></tr><tr><td>!</td><td>Renesas SH</td></tr><tr><td>#</td><td>i386, x86-64, i960, 68HC11, 68HC12, VAX, V850, M32R, PowerPC, MIPS, M680x0, and RISC-V</td></tr></tbody></table><blockquote><p>Although the syntax is different (NASM uses a more “intel” approach while GAS uses a “AT&amp;T” approach), the registers perform the same functions in both assemblers.</p></blockquote>`,31)]))}const c=t(n,[["render",l]]);export{g as __pageData,c as default};
